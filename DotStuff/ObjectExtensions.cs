// <auto-generated>
//   DO NOT DELETE THIS FILE.
//
//   This file was added by the NuGet package DotStuff (https://www.nuget.org/packages/DotStuff).
//   See https://github.com/sharpjs/DotStuff for more information.
//
//   If you see this file in your project and are using a packages.config file
//   to manage NuGet package references, consider migrating to PackageReference:
//   https://learn.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
// </auto-generated>

// Copyright 2024 Jeffrey Sharp
// SPDX-License-Identifier: ISC
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
// 
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#if !DOTSTUFF_DISABLE

#if !DOTSTUFF_ENABLE_WARNINGS
  #pragma warning disable
#endif

// Default feature support by language and target framework:
//
// Feature                      C#      Framework   Core/5+     Standard
// ---------------------------  ------  ----------  ----------  ----------
// AggressiveInlining           any     4.5         1.0         1.0
// [ExcludeFromCodeCoverage]    any     4.0         2.0         2.0
// [NotNullIfNotNull]           any     none        3.0         2.1
// ??= operator                 8.0     none        3.0         2.1
//
// Note that the _OR_GREATER symbols are defined only when using a .NET 5+ SDK:
// https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives

#if NETCOREAPP3_0 || NETCOREAPP3_1 || NET5_0_OR_GREATER || NETSTANDARD2_1
  #define DOTSTUFF_HAS_AGGRESSIVE_INLINING
  #define DOTSTUFF_HAS_CSHARP_8_OR_GREATER
  #define DOTSTUFF_HAS_EXCLUDE_FROM_CODE_COVERAGE
  #define DOTSTUFF_HAS_NULLABLE
#elif NETCOREAPP2_0 || NETCOREAPP2_1 || NETCOREAPP2_2 || NETSTANDARD2_0
  #define DOTSTUFF_HAS_AGGRESSIVE_INLINING
  #define DOTSTUFF_HAS_EXCLUDE_FROM_CODE_COVERAGE
#elif NETCOREAPP || NETSTANDARD
  #define DOTSTUFF_HAS_AGGRESSIVE_INLINING
#elif NETFRAMEWORK && !(NET20 || NET30 || NET35 || NET40)
  #define DOTSTUFF_HAS_AGGRESSIVE_INLINING
  #define DOTSTUFF_HAS_EXCLUDE_FROM_CODE_COVERAGE
#elif NET40
  #define DOTSTUFF_HAS_EXCLUDE_FROM_CODE_COVERAGE
#endif

#if DOTSTUFF_HAS_NULLABLE
  #nullable enable
#endif

namespace DotStuff
{
    /// <summary>
    ///   Extensions provided by the
    ///   <see href="https://github.com/sharpjs/DotStuff">DotStuff</see>
    ///   package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCode]
#if DOTSTUFF_HAS_EXCLUDE_FROM_CODE_COVERAGE && !DOTSTUFF_ENABLE_CODE_COVERAGE
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#endif
#if DOTSTUFF_PUBLIC
    public
#else
    internal
#endif
    static class ObjectExtensions
    {
        #region Tap

        /// <summary>
        ///   Passes the value to the specified action and returns the value.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="action">
        ///   The action to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-tap">tap</see>
        ///   method, which enables the developer to 'tap into' a method chain
        ///   and perform some operation on an intermediate result within the
        ///   chain.
        /// </remarks>
        /// <returns>
        ///   The <paramref name="value"/>.
        /// </returns>
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
        public static T Tap<T>(
            this T value,
            global::System.Action<T> action)
        {
            action(value);
            return value;
        }

        /// <summary>
        ///   Passes the value to the specified action and returns the value.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <typeparam name="T1">
        ///   The type of <paramref name="arg1"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="arg1">
        ///   An argument to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="action">
        ///   The action to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-tap">tap</see>
        ///   method, which enables the developer to 'tap into' a method chain
        ///   and perform some operation on an intermediate result within the
        ///   chain.
        /// </remarks>
        /// <returns>
        ///   The <paramref name="value"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
        public static T Tap<T, T1>(
            this T value, T1 arg1,
            global::System.Action<T, T1> action)
        {
            action(value, arg1);
            return value;
        }

        /// <summary>
        ///   Passes the value to the specified action and returns the value.
        /// </summary>
        /// <typeparam name="T0">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <typeparam name="T1">
        ///   The type of <paramref name="arg1"/>.
        /// </typeparam>
        /// <typeparam name="T2">
        ///   The type of <paramref name="arg2"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="arg1">
        ///   An argument to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="arg2">
        ///   An argument to pass to the <paramref name="action"/>.
        /// </param>
        /// <param name="action">
        ///   The action to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-tap">tap</see>
        ///   method, which enables the developer to 'tap into' a method chain
        ///   and perform some operation on an intermediate result within the
        ///   chain.
        /// </remarks>
        /// <returns>
        ///   The <paramref name="value"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
        public static T0 Tap<T0, T1, T2>(
            this T0 value, T1 arg1, T2 arg2,
            global::System.Action<T0, T1, T2> action)
        {
            action(value, arg1, arg2);
            return value;
        }

        #endregion
        #region Apply

        /// <summary>
        ///   Passes the value to the specified function and returns the result
        ///   of the function.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <typeparam name="TResult">
        ///   The type of the result of <paramref name="function"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="function">
        ///   The function to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-then">then</see>
        ///   method.
        /// </remarks>
        /// <returns>
        ///   The result of the <paramref name="function"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
        public static TResult Apply<T, TResult>(
            this T value,
            global::System.Func<T, TResult> function)
        {
            return function(value);
        }

        /// <summary>
        ///   Passes the value to the specified function and returns the result
        ///   of the function.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <typeparam name="T1">
        ///   The type of <paramref name="arg1"/>.
        /// </typeparam>
        /// <typeparam name="TResult">
        ///   The type of the result of <paramref name="function"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="arg1">
        ///   An argument to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="function">
        ///   The function to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-then">then</see>
        ///   method.
        /// </remarks>
        /// <returns>
        ///   The result of the <paramref name="function"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
        public static TResult Apply<T, T1, TResult>(
            this T value, T1 arg1,
            global::System.Func<T, T1, TResult> function)
        {
            return function(value, arg1);
        }

        /// <summary>
        ///   Passes the value to the specified function and returns the result
        ///   of the function.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of <paramref name="value"/>.
        /// </typeparam>
        /// <typeparam name="T1">
        ///   The type of <paramref name="arg1"/>.
        /// </typeparam>
        /// <typeparam name="TResult">
        ///   The type of the result of <paramref name="function"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="arg1">
        ///   An argument to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="arg2">
        ///   An argument to pass to the <paramref name="function"/>.
        /// </param>
        /// <param name="function">
        ///   The function to invoke.
        /// </param>
        /// <remarks>
        ///   This method is inspired by Ruby's
        ///   <see href="https://ruby-doc.org/3.3.0/Kernel.html#method-i-then">then</see>
        ///   method.
        /// </remarks>
        /// <returns>
        ///   The result of the <paramref name="function"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
        public static TResult Apply<T, T1, T2, TResult>(
            this T value, T1 arg1, T2 arg2,
            global::System.Func<T, T1, T2, TResult> function)
        {
            return function(value, arg1, arg2);
        }

        #endregion
        #region AssignTo

        /// <summary>
        ///   Assigns the value to the specified location.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of the <paramref name="location"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to assign.
        /// </param>
        /// <param name="location">
        ///   The location to which the <paramref name="value"/> should be
        ///   assigned.
        /// </param>
        /// <remarks>
        ///   <para>
        ///     This method is a chainable version of the following code:
        ///   </para>
        ///   <code>
        ///     location = value;
        ///   </code>
        /// </remarks>
        /// <returns>
        ///   The <paramref name="value"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
#if DOTSTUFF_HAS_NULLABLE
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
#endif
        public static T AssignTo<T>(
            this T value,
#if DOTSTUFF_HAS_NULLABLE
            [global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
#endif
            out T location)
        {
            return location = value;
        }

        #endregion
        #region CoalesceTo

#if DOTSTUFF_HAS_CSHARP_8_OR_GREATER
        /// <summary>
        ///   Assigns the value to the specified location if the location is
        ///   <see langword="null"/>.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of the <paramref name="location"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to assign.
        /// </param>
        /// <param name="location">
        ///   The location to which the <paramref name="value"/> should be
        ///   assigned if the location is <see langword="null"/>.
        /// </param>
        /// <remarks>
        ///   <para>
        ///     This method is a chainable version of the following code:
        ///   </para>
        ///   <code>
        ///     location ??= value;
        ///   </code>
        /// </remarks>
        /// <returns>
        ///   The value stored in the <paramref name="location"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
#if DOTSTUFF_HAS_NULLABLE
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(location))]
#endif
        public static T CoalesceTo<T>(
            this T value,
#if DOTSTUFF_HAS_NULLABLE
            [global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
#endif
            ref T location)
        {
            return location ??= value;
        }
#endif

#if DOTSTUFF_HAS_CSHARP_8_OR_GREATER
        /// <summary>
        ///   Assigns the value to the specified location if the location is
        ///   <see langword="null"/>.
        /// </summary>
        /// <typeparam name="T">
        ///   The type of the <paramref name="location"/>.
        /// </typeparam>
        /// <param name="value">
        ///   The value to assign.
        /// </param>
        /// <param name="location">
        ///   The location to which the <paramref name="value"/> should be
        ///   assigned if the location is <see langword="null"/>.
        /// </param>
        /// <remarks>
        ///   <para>
        ///     This method is a chainable version of the following code:
        ///   </para>
        ///   <code>
        ///     location ??= value;
        ///   </code>
        /// </remarks>
        /// <returns>
        ///   The value stored in the <paramref name="location"/>.
        /// </returns>
#if DOTSTUFF_HAS_AGGRESSIVE_INLINING
        [global::System.Runtime.CompilerServices.MethodImpl(
            global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining
        )]
#endif
#if DOTSTUFF_HAS_NULLABLE
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(location))]
#endif
        public static T CoalesceTo<T>(
            this T value,
#if DOTSTUFF_HAS_NULLABLE
            [global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(value))]
#endif
            ref global::System.Nullable<T> location)
            where T : struct
        {
            return location ??= value;
        }
#endif
        #endregion
    }
}

#if DOTSTUFF_HAS_NULLABLE
  #nullable restore
#endif

#pragma warning restore

#endif // DOTSTUFF_DISABLE
